// Recursive

 string decodeStringDFS(string &s, int &index)
    {
        string result;
        while(index < s.size() && s[index] != ']')
        {
            if(isdigit(s[index]))
            {
                int k = 0;
                while(index < s.size() && isdigit(s[index]))
                    k = k * 10 + s[index++] -'0';
                
                index++;
                string r = decodeStringDFS(s,index);
                
                while(k--)
                result += r;
                
                index++;
            }
            else
                result += s[index++];
        }
        return result;
    }
    
    public:
    
    string decodeString(string s) {
        int index = 0;
        return decodeStringDFS(s, index);
    }
    
    //iterative (intuitive)
    
      string decodeString(string s) {
          stack<string> chars;
        stack<int> nums;
        string res;
        int num = 0;
        for(char c : s) {
            if(isdigit(c)) {
                num = num*10 + (c-'0');                              
            }
            else if(isalpha(c)) {
                res.push_back(c);                
            }
            else if(c == '[') {
                chars.push(res);
                nums.push(num);
                res = "";
                num = 0;
            }
            else if(c == ']') {
                string tmp = res;
                for(int i = 0; i < nums.top()-1; ++i) {
                    res += tmp;
                }
                res = chars.top() + res;
                chars.pop(); nums.pop();
            }
        }
        return res;
    }
